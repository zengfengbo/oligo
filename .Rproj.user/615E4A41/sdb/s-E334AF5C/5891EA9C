{
    "collab_server" : "",
    "contents" : "/*\nCopyright (c) 1996,1997,1998,1999,2000,2001,2004,2006,2007,2008\nWhitehead Institute for Biomedical Research, Steve Rozen\n(http://purl.com/STEVEROZEN/), Andreas Untergasser and Helen Skaletsky.\nAll rights reserved.\n\n    This file is part of the primer3 suite and libraries.\n\n    The primer3 suite and libraries are free software;\n    you can redistribute them and/or modify them under the terms\n    of the GNU General Public License as published by the Free\n    Software Foundation; either version 2 of the License, or (at\n    your option) any later version.\n\n    This software is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this software (file gpl-2.0.txt in the source\n    distribution); if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n#ifndef _OLIGO_TM\n#define _OLIGO_TM 1\n\n#ifdef __cplusplus\n  extern \"C\" {\n#endif\n\n#define OLIGOTM_ERROR -999999.9999\n\n/* Return the delta G of the last len bases of oligo if oligo is at least len\n   bases long; otherwise return the delta G of oligo. */\ndouble end_oligodg(const char *oligo, int len, int tm_method);\n\n/* Calculate the melting temperature of substr(seq, start, length) using the\n   formula from Bolton and McCarthy, PNAS 84:1390 (1962) as presented in\n   Sambrook, Fritsch and Maniatis, Molecular Cloning, p 11.46 (1989, CSHL\n   Press).\n\n   Tm = 81.5 + 16.6(log10([Na+])) + .41*(%GC) - 600/length\n\n   Where [Na+] is the molar sodium concentration, (%GC) is the percent of Gs\n   and Cs in the sequence, and length is the length of the sequence.\n\n   A similar formula is used by the prime primer selection program in GCG\n   (http://www.gcg.com), which instead uses 675.0 / length in the last term\n   (after F. Baldino, Jr, M.-F. Chesselet, and M.E.  Lewis, Methods in\n   Enzymology 168:766 (1989) eqn (1) on page 766 without the mismatch and\n   formamide terms).  The formulas here and in Baldino et al. assume Na+ rather\n   than K+.  According to J.G. Wetmur, Critical Reviews in BioChem. and\n   Mol. Bio. 26:227 (1991) 50 mM K+ should be equivalent in these formulae to .2\n   M Na+.\n\n   This function takes salt_conc to be the millimolar (mM) concentration,\n   since mM is the usual units in PCR applications.\n\n */\ndouble long_seq_tm(const char *seq,\n                   int start,\n                   int length,\n                   double salt_conc,\n                   double divalent_conc,\n                   double dntp_conc);\n\n/*\n   For olgigotm() and seqtm()\n\n   Both functions return the melting temperature of the given oligo\n   calculated as specified by user, but oligotm _should_ only be used on\n   DNA sequences of length <= MAX_PRIMER_LENGTH (which is defined\n   elsewhere).  seqtm uses oligotm for sequences of length <=\n   MAX_PRIMER_LENGTH, and a different, G+C% based formula for longer\n   sequences.  For oligotm(), no error is generated on sequences\n   longer than MAX_PRIMER_LENGTH, but the formula becomes less\n   accurate as the sequence grows longer.  Caveat emptor.\n\n   We use the folowing typedefs:\n*/\ntypedef enum tm_method_type {\n        breslauer_auto      = 0,\n        santalucia_auto     = 1,\n} tm_method_type;\n\ntypedef enum salt_correction_type {\n        schildkraut    = 0,\n        santalucia     = 1,\n        owczarzy       = 2,\n} salt_correction_type;\n\n/*\n   If tm_method==santalucia_auto, then the table of\n   nearest-neighbor thermodynamic parameters and method for Tm\n   calculation in the paper [SantaLucia JR (1998) \"A unified view of\n   polymer, dumbbell and oligonucleotide DNA nearest-neighbor\n   thermodynamics\", Proc Natl Acad Sci 95:1460-65\n   http://dx.doi.org/10.1073/pnas.95.4.1460] is used.\n   *THIS IS THE RECOMMENDED VALUE*.\n\n   If tm_method==breslauer_auto, then method for Tm\n   calculations in the paper [Rychlik W, Spencer WJ and Rhoads RE\n   (1990) \"Optimization of the annealing temperature for DNA\n   amplification in vitro\", Nucleic Acids Res 18:6409-12\n   http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pubmed&pubmedid=2243783].\n   and the thermodynamic parameters in the paper [Breslauer KJ, Frank\n   R, Bl?cker H and Marky LA (1986) \"Predicting DNA duplex stability\n   from the base sequence\" Proc Natl Acad Sci 83:4746-50\n   http://dx.doi.org/10.1073/pnas.83.11.3746], are is used.  This is\n   the method and the table that primer3 used up to and including\n   version 1.0.1\n\n   If salt_corrections==schildkraut, then formula for\n   salt correction in the paper [Schildkraut, C, and Lifson, S (1965)\n   \"Dependence of the melting temperature of DNA on salt\n   concentration\", Biopolymers 3:195-208 (not available on-line)] is\n   used.  This is the formula that primer3 used up to and including\n   version 1.0.1.\n\n   If salt_corrections==santalucia, then formula for\n   salt correction suggested by the paper [SantaLucia JR (1998) \"A\n   unified view of polymer, dumbbell and oligonucleotide DNA\n   nearest-neighbor thermodynamics\", Proc Natl Acad Sci 95:1460-65\n   http://dx.doi.org/10.1073/pnas.95.4.1460] is used.\n\n   *THIS IS THE RECOMMENDED VALUE*.\n\n   If salt_corrections==owczarzy, then formula for\n   salt correction in the paper [Owczarzy, R., Moreira, B.G., You, Y.,\n   Behlke, M.A., and Walder, J.A. (2008) \"Predicting stability of DNA\n   duplexes in solutions containing magnesium and monovalent cations\",\n   Biochemistry 47:5336-53 http://dx.doi.org/10.1021/bi702363u] is used.\n\n */\n\ndouble oligotm(const  char *seq,     /* The sequence. */\n               double dna_conc,      /* DNA concentration (nanomolar). */\n               double salt_conc,     /* Salt concentration (millimolar). */\n               double divalent_conc, /* Concentration of divalent cations (millimolar) */\n               double dntp_conc,     /* Concentration of dNTPs (millimolar) */\n               //tm_method_type tm_method,    /* See description above. */\n               //salt_correction_type salt_corrections  /* See description above. */\n               int tm_method,    /* See description above. */\n               int salt_corrections  /* See description above. */\n               );\n\n/* Return the melting temperature of a given sequence, 'seq', of any\n   length.\n*/\ndouble seqtm(const  char *seq,  /* The sequence. */\n             double dna_conc,   /* DNA concentration (nanomolar). */\n             double salt_conc,  /* Concentration of divalent cations (millimolar). */\n             double divalent_conc, /* Concentration of divalent cations (millimolar) */\n             double dntp_conc,     /* Concentration of dNTPs (millimolar) */\n             int    nn_max_len,  /* The maximum sequence length for\n                                    using the nearest neighbor model\n                                    (as implemented in oligotm.  For\n                                    sequences longer than this, seqtm\n                                    uses the \"GC%\" formula implemented\n                                    in long_seq_tm.\n                                 */\n\n             tm_method_type  tm_method,       /* See description above. */\n             salt_correction_type salt_corrections /* See description above. */\n             );\n\n\n/* Return the delta G of disruption of oligo using the nearest neighbor model.\n   The length of seq should be relatively short,\n   given the characteristics of the nearest\n   neighbor model.\n*/\ndouble oligodg(const char *seq,\n               int tm_method /* See description above. */\n               );\n\n/* Returns 1 if the sequence is self-complementary or symmetrical; 0\n   otherwise\n*/\nint symmetry(const char *seq);\n\n/* Converts divalent salt concentration to monovalent salt concentration */\n\ndouble divalent_to_monovalent(double divalent, double dntp);\n\n#ifdef __cplusplus\n    }\n#endif\n\n#endif\n",
    "created" : 1480064626215.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3633028786",
    "id" : "5891EA9C",
    "lastKnownWriteTime" : 1480067850,
    "last_content_update" : 1480067850422,
    "path" : "~/src/oligo/src/oligotm.h",
    "project_path" : "src/oligotm.h",
    "properties" : {
        "marks" : "<:0,0\n>:0,0"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}